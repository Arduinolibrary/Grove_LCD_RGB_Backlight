// test i2c of grove - lcd rgb backlight
// loovee 2013-9-7

#include <Wire.h>
#include <Streaming.h>

const int I2C_ADDRESS = 0x7c>>1;


void i2c_send_byte(unsigned char dta)
{
    Wire.beginTransmission(I2C_ADDRESS);        // transmit to device #4
    Wire.write(dta);                            // sends five bytes
    Wire.endTransmission();                     // stop transmitting
}

void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
    Wire.beginTransmission(I2C_ADDRESS);        // transmit to device #4

    for(int i=0; i<len; i++)
    {
        Wire.write(dta[i]);
    }
    Wire.endTransmission();                     // stop transmitting
}


void START()
{
    Wire.beginTransmission(I2C_ADDRESS);        // transmit to device #4
}

void STOP()
{
     Wire.endTransmission();                    // stop transmitting
}

void setup()
{
    Serial.begin(115200);
    Wire.begin();

    cout << "hello world" << endl;
    
    delay(1000);
}

void loop()
{
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0xFF,0x80,16);
    delay2();
    STOP();


    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0xFF,0xc0,16);
    delay2();
    STOP();
    delay4();
    delay4();
    delay4();
    clean();

    NUM(0X50,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    NUM(0x51,0x00,0x00,0x00,0x00,0x00,0x00,0xAA,0x00);
    delay2();
    NUM(0x52,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    NUM(0x53,0x00,0x00,0x00,0x00,0x00,0x00,0xAA,0x00);
    delay2();
    NUM(0x54,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    NUM(0x55,0x00,0x00,0x00,0x00,0x00,0x00,0xAA,0x00);
    delay2();
    NUM(0x56,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    NUM(0x57,0x00,0x00,0x00,0x00,0x00,0x00,0xAA,0x00);
    delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x02,0x80,16);
    delay2();
    STOP();
    //delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x02,0xc0,16);
    delay2();
    STOP();
    delay4();
    delay4();
    delay4();
    //clean();

    NUM(0X58,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
    delay2();
    NUM(0x59,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    NUM(0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
    delay2();
    NUM(0x5B,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    NUM(0x5C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
    delay2();
    NUM(0x5D,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    NUM(0x5E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
    delay2();
    NUM(0x5F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
    delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x03,0x80,16);
    delay2();
    STOP();
    //delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x03,0xc0,16);
    delay2();
    STOP();
    //delay4();
    //delay4();
    delay4();
    //clean();

    NUM(0X40,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    NUM(0x41,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    NUM(0x42,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    NUM(0x43,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    NUM(0x44,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    NUM(0x45,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    NUM(0x46,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    NUM(0x47,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55);
    delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x00,0x80,16);
    delay2();
    STOP();
    //delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x00,0xc0,16);
    delay2();
    STOP();
    delay4();
    delay4();
    delay4();
    //clean();

    NUM(0X48,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    NUM(0x49,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    NUM(0x4A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    NUM(0x4B,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    NUM(0x4C,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    NUM(0x4D,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    NUM(0x4E,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    NUM(0x4F,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA);
    delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x01,0x80,16);
    delay2();
    STOP();
    //delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x01,0xc0,16);
    delay2();
    STOP();
    delay4();
    delay4();
    delay4();
    //clean();



    NUM(0X68,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA);
    delay2();
    NUM(0x69,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55);
    delay2();
    NUM(0x6A,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA);
    delay2();
    NUM(0x6B,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55);
    delay2();
    NUM(0x6C,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA);
    delay2();
    NUM(0x6D,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55);
    delay2();
    NUM(0x6E,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA);
    delay2();
    NUM(0x6F,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55);
    delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x05,0x80,16);
    delay2();
    STOP();
    delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS1(0x05,0xc0,16);
    delay2();
    STOP();
    delay4();
    delay4();
    delay4();
    clean();

    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS(0x41,0x80,16);
    delay2();
    STOP();
    delay2();
    START();
    delay2();
    writeHEAD(0x38);
    delay2();
    writeDATAS(0xB1,0xc0,16);
    delay2();
    STOP();
    delay4();
    delay4();
    delay4();
    clean();
    
    delay(500);
    
    //while(1);
}

void delay1()
{
    delayMicroseconds(1000);
}

void delay2()
{
    delayMicroseconds(200);
}

void delay3()
{
    delayMicroseconds(50);
}

void delay4()
{
    delay(200);
}

void writeHEAD(unsigned char screan)//screan控制显示模式（5*8/5*11字体，1/2行显示）
{
    unsigned char ss;
    ss=screan;
    Wire.write(0x80);
    delay3();
    Wire.write(ss);
    delay1();
    Wire.write(0x80);
    delay3();
    Wire.write(0x0f);
    delay1();
    Wire.write(0x80);
    delay3();
    Wire.write(0x02);
    delay1();
    Wire.write(0x80);
    delay3();
    Wire.write(0x06);
    delay1();
}

void writeDATAS(unsigned char insts,unsigned char line,unsigned char j)   //insts是字库中字符对应的位置，line的数据是DDRAM地址，j代表选择几个连续的字符
{
    unsigned char i;
    unsigned char si;
    unsigned char sl;
    si=insts;
    sl=line;
    Wire.write(0x80);
    delay1();
    Wire.write(sl);
    delay1();
    Wire.write(0x40);
    for(i=0;i<j;i++)
    {
        Wire.write(si);
        delay1();
        si++;
        delay2();
    }
}

void writeDATAS1(unsigned char insts,unsigned char line,unsigned char j)   //insts是字库中字符对应的位置，line的数据是DDRAM地址，j代表选择几个连续的字符
{
    unsigned char i;
    unsigned char si;
    unsigned char sl;
    si=insts;
    sl=line;
    Wire.write(0x80);
    delay1();
    Wire.write(sl);
    delay1();
    Wire.write(0x40);
    for(i=0;i<j;i++)
    {
        Wire.write(si);
        delay1();
        delay2();
    }
}

void clean(void)           //清屏指令
{
    unsigned char dta[2] = {0x80, 0x01};
    i2c_send_byteS(dta, 2);

}

void NUM(unsigned char CGRAMDATA,unsigned char DATA0,unsigned char DATA1,unsigned char DATA2,unsigned char DATA3,unsigned char DATA4,unsigned char DATA5,unsigned char DATA6,unsigned char DATA7)
{
    unsigned char dta[11] = {0x80, CGRAMDATA, 0x40, DATA0, DATA1, DATA2, DATA3, DATA4, DATA5, DATA6, DATA7};
    i2c_send_byteS(dta, 11);
}
